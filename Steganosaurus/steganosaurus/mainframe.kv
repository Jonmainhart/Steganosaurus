#:kivy 2.1.0
# -------------------------------------
#Steganosaurus
    
# Linden Crandall
# Jonthan Mainhart
# Zhihua Zheng

# Final Project for CMSC 495.

# April 12, 2022

# MainFrame Template for Steganosaurus.
# -------------------------------------
#: import Factory kivy.factory.Factory
#: import utils kivy.utils
<MainWidget>:
    id: main_widget
    rows: 4
    padding: "20dp"
    spacing: "5dp"
    #pos_hint: {"top": 1}
    GridLayout:
        cols:2
        size_hint: None, None
        size: "350dp", "250dp"
        Image:
            id: main_image
            source: root.display_image.filename
            size_hint: None, None
            width: "330dp"
            height: "250dp"
            allow_stretch: True
        BoxLayout:
            orientation: "vertical"
            padding: "20dp"
            spacing: "15dp"
            RoundedCornerButton:
                id: open_btn
                text_size: self.width, None
                font_size: self.width/8
                halign: 'center'
                size_hint: None, None
                width: "110dp"
                height: "40dp"
                text: "Open Image"
                on_release: root.on_open_button_click()
            RoundedCornerButton:
                id: encode_btn
                text_size: self.width, None
                font_size: self.width/8
                halign: 'center'
                size_hint: None, None
                width: "110dp"
                height: "40dp"
                text: "Encode Image"
                on_release: root.on_encode_button_click()
            RoundedCornerButton:
                id: save_btn
                text_size: self.width, None
                font_size: self.width/8
                halign: 'center'
                size_hint: None, None
                width: "110dp"
                height: "40dp"
                text: "Save Image"
                on_release: root.on_save_button_click() # TODO root is MainWidget
            RoundedCornerButton:
                id: reset_btn
                text_size: self.width, None
                font_size: self.width/8
                halign: 'center'
                size_hint: None, None
                width: "110dp"
                height: "40dp"
                text: "Reset Image"
                disabled: app.reset_btn_disabled
                on_release: root.on_reset_button_click()

    MessageLabel: #DialogNotificationLabel
        size_hint: 1, None
        height: "40dp"
        text: root.user_notification_msg or ' '
        font_size: self.width/35
        color: (1,0,0,1)
        text_size: self.width, None
        size_hint_y: None
        height: self.texture_size[1]

    TextInput:
        id: main_text_field
        size_hint: None, None
        size: "500dp", "150dp"
        text: root.textfield_str
        hint_text: "Enter scecret message here" # Place holder
        multiline: True
        disabled: app.textfield_disabled
        on_text_validate: root.on_text_validate() 

    AnchorLayout: 
        anchor_x: 'right'
        anchor_y: 'center'
        size_hint: None, None
        size: "500dp", "30dp"
        Label:
            id: input_char_count 
            text: "(" + (str(root.maximum_char_count - len(main_text_field.text))) + "/" + str(root.maximum_char_count) +")"
            text_size: self.width, None
            size_hint_y: None
            halign: 'right'
            font_size: 30
            size_hint: 1, 1

<WarningPopup@Popup>:
    id: warning_dialog
    auto_dismiss: False
    title: "%s"%(app.message_type) # Display Message Type
    size_hint: None, None
    size: "300dp", "300dp"
    pos_hint: {'center_x': .5,'center_y': .5}
    WarningDialog:

<InfoAndErrorPopup@Popup>:
    id: info_error_dialog
    auto_dismiss: False
    title: "%s"%(app.message_type) # Display Message Type
    size_hint: None, None
    size: "300dp", "300dp"
    pos_hint: {'center_x': .5,'center_y': .5}
    InfoAndErrorDialog:

<RoundedCornerButton@Button>:
    background_disabled_normal: "black"
    background_color: (0,0,0,0)
    background_normal: "white"
    color: 1, 1, 1, 1 # Text color
    customized_color: (76/255, 175/255, 80/255, 1)
    bold: True
    # Change button background color, on press
    on_press: root.customized_color = utils.get_color_from_hex('#3e8e41')
    on_release: root.customized_color = (76/255, 175/255, 80/255, 1)
    canvas.before:
        Color:
            rgba: self.customized_color
        RoundedRectangle:
            size: self.size
            pos: self.pos
            radius: [25]

<MessageLabel@Label>: # TODO: Delete if not using.
    background_color: (0,0,0,0)
    background_normal: "white"
    canvas.before:
        Color:
            rgba: self.background_color
        RoundedRectangle:
            size: self.size
            pos: self.pos

<ImageChooserPopup>:
    title: "Choose Your Image"
    BoxLayout:
        id: file_chooser_popup
        size: root.size
        orientation: "vertical"
        Image: # this is the window that will display the image before loading it onto main GUI
            id: file_image
            source: ""
        FileChooserIconView:
            id: file_chooser
            path: './'
            on_selection: root.selected(file_chooser.selection) # when a file, not folder/directory is clicked
        BoxLayout:
            size_hint_y: None
            height: 50
            Button: 
                text: "Cancel"
                on_release: root.dismiss()
            Button:
                text: "Load"
                # TODO: Need to add load file code.
                # goes to stego.load_list()
                on_press: app.root.update_textfield_input() # After loading image, decode image then display msg
                on_release: root.load_list() # root is ImageChooserPopup

<ImageSaverPopup>: # root is ImageSaverPopup
    title: "Choose folder location where image is to be saved"
    BoxLayout:
        id: file_saver_popup
        size: root.size
        orientation: "vertical"
        spacing: "5dp"
        FileChooserIconView:
            id: file_saver
            path: './'
            on_selection: new_image_name.text = str(((self.selection[0]).split("/"))[-1]) if "/" in str(self.selection[0]) else str(((self.selection[0]).split("\\"))[-1]) # Get overwrite image name.
        TextInput: # Allow user to enter a new image file name.
            id: new_image_name
            hint_text: "Enter a new image file name without extension. \nNew image will be saved as PNG format." # Place holder
            size_hint: 1, None
            height: "40dp"
            multiline: True
        BoxLayout:
            size_hint_y: None
            height: 50
            Button:
                text: "Cancel"
                on_release: root.dismiss()
            Button:
                text: "Save"
                on_press: app.root.save(file_saver.path, new_image_name.text) # After clicking save button, go to save method